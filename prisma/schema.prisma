generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum EventStatus {
  Open
  Closed
  Cancelled
  Live
}

enum Platform {
  Discord
  TickAp
  Other
}

enum Category {
  VedioGame
  ESports
  Music
  Other
}

model events {
  id                BigInt              @id @default(autoincrement())
  name              String              @db.VarChar
  banner            String              @db.VarChar  @default("/tickap_dark.png")
  start_time        Int?
  date              DateTime?           @db.Timestamp          
  prize             String?             @db.VarChar
  max_teams         Int?
  min_team_player   Int?
  max_team_player   Int?
  rules             String?
  details           String?
  is_solo           Boolean?
  extra             Json?
  redirect_url      String?             @db.VarChar
  location          String?             @db.VarChar
  location_url      String?             @db.VarChar
  status            EventStatus         @default(Open)      

  category          Category            @default(VedioGame)
  category_name     String?             @db.VarChar
  
  platform          Platform            @default(Discord)
  role_id           BigInt?
  manager_id        BigInt?
  guild_id          BigInt?
  channel_id        BigInt?
  
  created_at        DateTime            @default(now())
  updated_at        DateTime            @updatedAt
  
  registrations     registrations[]
  registrationusers registrationusers[]

  @@map("event")

}

model registrations {
  id                BigInt              @id @default(autoincrement())
  event_id          BigInt
  team_name         String?             @db.VarChar
  local_id          Int?
  extra             Json?
  events            events              @relation(fields: [event_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_event")
  
  created_at        DateTime            @default(now())
  updated_at        DateTime            @updatedAt
  
  registrationusers registrationusers[]

  @@map("regs")
}

model registrationusers {
  user_id         BigInt
  registration_id BigInt
  event_id        BigInt
  user_name       String?       @db.VarChar
  pfp             String?       @db.VarChar
  
  created_at      DateTime      @default(now())
  updated_at      DateTime      @updatedAt
  
  events          events        @relation(fields: [event_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_event")
  registrations   registrations @relation(fields: [registration_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_reg")
  
  @@id([user_id, registration_id])
  @@map("regusers")
}


// Next Auth Schema

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([provider, providerAccountId])
}
 
model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@id([identifier, token])
}
 
// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([userId, credentialID])
}
